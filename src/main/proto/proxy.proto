// Copyright 2019 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_package = "org.examples.grpc.pubsub";
option java_multiple_files = true;
option java_outer_classname = "PubsubProxyProto";

package org.examples.grpc.pubsub;

import "google/protobuf/timestamp.proto";

// Proxy service definition
service PubsubProxyService {

  // Health check
  rpc GetHealth (Void) returns (Void) {}
    
  // Publish message to Google Cloud PubSub
  rpc Publish (PublishRequest) returns (PublishResponse) {}
}

// Request for the Publish method.
message PublishRequest {

  // The message in the request will be published on this topic.
  string topic = 1;

  // Message to publish.
  PubMessage message = 2;
}

message PubMessage {
  // The message data field. If this field is empty, the message must contain
  // at least one attribute.
  string data = 1;

  // Optional attributes for this message.
  string attributes = 2;

  // ID of this message, assigned by the server when the message is published.
  // Guaranteed to be unique within the topic. This value may be read by a
  // subscriber that receives a `PubsubMessage` via a `Pull` call or a push
  // delivery. It must not be populated by the publisher in a `Publish` call.
  string message_id = 3;

  // The time at which the message was published, populated by the server when
  // it receives the `Publish` call. It must not be populated by the
  // publisher in a `Publish` call.
  google.protobuf.Timestamp publish_time = 4;
}

// Response for the `Publish` method.
message PublishResponse {
  // The server-assigned ID of each published message. 
  // IDs are guaranteed to be unique within the topic.
   string message_id = 1;
}

message Void {
}